From bb893adfe7b6b30e19728497645b56c7fbb5dfb7 Mon Sep 17 00:00:00 2001
From: Jonas Finnemann Jensen <jopsen@gmail.com>
Date: Sat, 8 Nov 2014 18:27:29 -0800
Subject: [PATCH] Added sodium.Key.SignKey.fromSeed(seed, encoding)

---
 docs/low-level-api.md | 36 +++++++++++++++++++++++++++++++++++-
 lib/keys/sign-key.js  | 11 +++++++++++
 sodium.cc             | 47 ++++++++++++++++++++++++++++++++++++++++++++++-
 test/test_sign.js     | 28 ++++++++++++++++++++++++++++
 4 files changed, 120 insertions(+), 2 deletions(-)

diff --git a/docs/low-level-api.md b/docs/low-level-api.md
index 06c819b..671d3fc 100755
--- a/docs/low-level-api.md
+++ b/docs/low-level-api.md
@@ -1015,7 +1015,7 @@ Decrypts a cipher text `ctxt` given the receivers given a `nonce` and the partia
 
 ## crypto_sign_keypair()
 
-Generates a random signing key pair with a secret key and corresponding public key. Returns an object as with two buffers as follows:
+Generates a random signing key pair with a secret key and corresponding public key. Returns an object with two buffers as follows:
 
 **Returns**:
 
@@ -1037,6 +1037,40 @@ Generates a random signing key pair with a secret key and corresponding public k
 var bobKeys = sodium.crypto_sign_keypair();
 ```
 
+## crypto_sign_seed_keypair(seed)
+
+Deterministically generates a signing key pair with a secret key and
+corresponding public key. The signing key pair is used for signing and contains
+the seed, in fact the only secret is the seed the other parts of the signing key
+always be reconstructed from the seed using this method. Hence, you only have
+to save the seed in your configuration file, database or where you store keys.
+
+**Parameters**:
+
+  * **Buffer** `message` to sign
+  * **Buffer** `seed` to generate signing key pair from. **Must** be `crypto_sign_SEEDBYTES` in length
+
+**Returns**:
+
+  * **{Object}** `keypair` with public and secret keys
+
+        { secretKey: <secret key buffer>,
+          publicKey: <public key buffer> }
+
+  * `undefined` in case or error
+
+**Key lengths**:
+
+  * `secretKey` is `crypto_sign_SECRETKEYBYTES` bytes in length
+  * `publicKey` is `crypto_sign_PUBLICKEYBYTES` bytes in length
+
+**Example**:
+
+```javascript
+var seed = new buffer('zSX0jgvyyaw8n+Z/Iv6lS7EI9pS7aesQUgxIsihjXfA=', 'base64');
+var aliceKeys = sodium.crypto_sign_seed_keypair(seed);
+```
+
      
 ## crypto_sign(message, secretKey)
 The `crypto_sign` function is designed to meet the standard notion of unforgeability for a public-key signature scheme under chosen-message attacks.
diff --git a/lib/keys/sign-key.js b/lib/keys/sign-key.js
index b8fe85d..4037687 100755
--- a/lib/keys/sign-key.js
+++ b/lib/keys/sign-key.js
@@ -4,6 +4,7 @@
 var util = require('util');
 var binding = require('../../build/Release/sodium');
 var KeyPair = require('./keypair');
+var toBuffer = require('../toBuffer');
 
 var Sign = function SignKey(publicKey, secretKey, encoding) {
     var self = this;
@@ -33,4 +34,14 @@ var Sign = function SignKey(publicKey, secretKey, encoding) {
     }
 };
 util.inherits(Sign, KeyPair);
+
+Sign.fromSeed = function(seed, encoding) {
+    encoding = String(encoding) || 'utf8';
+
+    var buf = toBuffer(seed, encoding);
+
+    var keys = binding.crypto_sign_seed_keypair(buf);
+    return new Sign(keys.publicKey, keys.secretKey, undefined);
+};
+
 module.exports = Sign;
\ No newline at end of file
diff --git a/sodium.cc b/sodium.cc
index 55cb060..3fac454 100755
--- a/sodium.cc
+++ b/sodium.cc
@@ -709,7 +709,7 @@ Handle<Value> bind_crypto_sign(const Arguments& args) {
  */
 Handle<Value> bind_crypto_sign_keypair(const Arguments& args) {
     HandleScope scope;
-    
+
     NEW_BUFFER_AND_PTR(vk, crypto_sign_PUBLICKEYBYTES);
     NEW_BUFFER_AND_PTR(sk, crypto_sign_SECRETKEYBYTES);
 
@@ -723,6 +723,50 @@ Handle<Value> bind_crypto_sign_keypair(const Arguments& args) {
 }
 
 /**
+ * Deterministically generate a signing/verification key pair from a seed.
+ *
+ * int crypto_sign_keypair(
+ *    unsigned char * vk,
+ *    unsigned char * sk,
+ *    const unsigned char * ps)
+ *
+ * Parameters:
+ *    [out] vk  the verification key.
+ *    [out] sk  the signing key.
+ *    [in]  sd  the seed for the key-pair.
+ *
+ * Returns:
+ *    0 if operation successful.
+ *
+ * Precondition:
+ *    the buffer for vk must be at least crypto_sign_PUBLICKEYBYTES in length
+ *    the buffer for sk must be at least crypto_sign_SECRETKEYTBYTES in length
+ *    the buffer for sd must be at least crypto_sign_SEEDBYTES in length
+ *
+ * Postcondition:
+ *    first crypto_sign_PUBLICKEYTBYTES of vk will be the key data.
+ *    first crypto_sign_SECRETKEYTBYTES of sk will be the key data.
+ */
+Handle<Value> bind_crypto_sign_seed_keypair(const Arguments& args) {
+    HandleScope scope;
+    
+    NUMBER_OF_MANDATORY_ARGS(1,"the argument seed must be a buffer");
+
+    GET_ARG_AS_UCHAR_LEN(0, sd, crypto_sign_SEEDBYTES);
+
+    NEW_BUFFER_AND_PTR(vk, crypto_sign_PUBLICKEYBYTES);
+    NEW_BUFFER_AND_PTR(sk, crypto_sign_SECRETKEYBYTES);
+
+    if( crypto_sign_seed_keypair(vk_ptr, sk_ptr, sd) == 0) {
+        Local<Object> result = Object::New();
+        result->Set(String::NewSymbol("publicKey"), vk->handle_, DontDelete);
+        result->Set(String::NewSymbol("secretKey"), sk->handle_, DontDelete);
+        return scope.Close(result);
+    }
+    return scope.Close(Undefined());
+}
+
+/**
  * Verifies the signed message sig using the signer's verification key.
  *
  * int crypto_sign_open(
@@ -1203,6 +1247,7 @@ void RegisterModule(Handle<Object> target) {
     // Sign
     NEW_METHOD(crypto_sign);
     NEW_METHOD(crypto_sign_keypair);
+    NEW_METHOD(crypto_sign_seed_keypair);
     NEW_METHOD(crypto_sign_open);
     NEW_INT_PROP(crypto_sign_BYTES);
     NEW_INT_PROP(crypto_sign_PUBLICKEYBYTES);
diff --git a/test/test_sign.js b/test/test_sign.js
index 5fa9d13..1662b5b 100755
--- a/test/test_sign.js
+++ b/test/test_sign.js
@@ -5,8 +5,10 @@ var should = require('should');
 var sodium = require('../build/Release/sodium');
 
 var Sign = require('../lib/sign');
+var SignKey = require('../lib/keys/sign-key');
 if (process.env.COVERAGE) {
     Sign = require('../lib-cov/sign');
+    SignKey = require('../lib-cov/keys/sign-key');
 }
 
 describe("Sign", function () {
@@ -18,4 +20,30 @@ describe("Sign", function () {
         checkMsg.toString('utf8').should.eql("This is a test");
         done();
     });
+    it("sign/verify with existing key", function(done) {
+        var key = new SignKey(
+            'DsWygyoTcB7/NT5OqRzT0eaFf+6bJBSSBRfDOyU3x9k=',
+            'Aav6yqemxoPNNqxeKJXMlruKxXEHLD931S8pXzxt4mkO' +
+            'xbKDKhNwHv81Pk6pHNPR5oV/7pskFJIFF8M7JTfH2Q==',
+            'base64');
+        var sign = new Sign(key);
+        var message = new Buffer("This is a test", 'utf8');
+        var signedMsg = sign.sign("This is a test", 'utf8');
+        signedMsg.publicKey.toString('base64').should.eql(
+            'DsWygyoTcB7/NT5OqRzT0eaFf+6bJBSSBRfDOyU3x9k=');
+        var checkMsg = Sign.verify(signedMsg);
+        checkMsg.toString('utf8').should.eql("This is a test");
+        done();
+    });
+    it("sign/verify with key from seed", function(done) {
+        var key = new SignKey.fromSeed('Aav6yqemxoPNNqxeKJXMlruKxXEHLD931S8pXzxt4mk=', 'base64');
+        var sign = new Sign(key);
+        var message = new Buffer("This is a test", 'utf8');
+        var signedMsg = sign.sign("This is a test", 'utf8');
+        signedMsg.publicKey.toString('base64').should.eql(
+            'DsWygyoTcB7/NT5OqRzT0eaFf+6bJBSSBRfDOyU3x9k=');
+        var checkMsg = Sign.verify(signedMsg);
+        checkMsg.toString('utf8').should.eql("This is a test");
+        done();
+    });
 });
\ No newline at end of file
